// Generated by gencpp from file ross/vehicle_status.msg
// DO NOT EDIT!


#ifndef ROSS_MESSAGE_VEHICLE_STATUS_H
#define ROSS_MESSAGE_VEHICLE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace ross
{
template <class ContainerAllocator>
struct vehicle_status_
{
  typedef vehicle_status_<ContainerAllocator> Type;

  vehicle_status_()
    : Battery_Status()
    , Velocity_Status()
    , Alt_Status()
    , Position_x()
    , Position_y()  {
    }
  vehicle_status_(const ContainerAllocator& _alloc)
    : Battery_Status(_alloc)
    , Velocity_Status(_alloc)
    , Alt_Status(_alloc)
    , Position_x(_alloc)
    , Position_y(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _Battery_Status_type;
  _Battery_Status_type Battery_Status;

   typedef  ::std_msgs::String_<ContainerAllocator>  _Velocity_Status_type;
  _Velocity_Status_type Velocity_Status;

   typedef  ::std_msgs::String_<ContainerAllocator>  _Alt_Status_type;
  _Alt_Status_type Alt_Status;

   typedef  ::std_msgs::String_<ContainerAllocator>  _Position_x_type;
  _Position_x_type Position_x;

   typedef  ::std_msgs::String_<ContainerAllocator>  _Position_y_type;
  _Position_y_type Position_y;





  typedef boost::shared_ptr< ::ross::vehicle_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ross::vehicle_status_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_status_

typedef ::ross::vehicle_status_<std::allocator<void> > vehicle_status;

typedef boost::shared_ptr< ::ross::vehicle_status > vehicle_statusPtr;
typedef boost::shared_ptr< ::ross::vehicle_status const> vehicle_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ross::vehicle_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ross::vehicle_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ross::vehicle_status_<ContainerAllocator1> & lhs, const ::ross::vehicle_status_<ContainerAllocator2> & rhs)
{
  return lhs.Battery_Status == rhs.Battery_Status &&
    lhs.Velocity_Status == rhs.Velocity_Status &&
    lhs.Alt_Status == rhs.Alt_Status &&
    lhs.Position_x == rhs.Position_x &&
    lhs.Position_y == rhs.Position_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ross::vehicle_status_<ContainerAllocator1> & lhs, const ::ross::vehicle_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ross

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ross::vehicle_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ross::vehicle_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::vehicle_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::vehicle_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::vehicle_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::vehicle_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ross::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aaafa5c64ffa127d3610f378ae59fa7f";
  }

  static const char* value(const ::ross::vehicle_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaaafa5c64ffa127dULL;
  static const uint64_t static_value2 = 0x3610f378ae59fa7fULL;
};

template<class ContainerAllocator>
struct DataType< ::ross::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ross/vehicle_status";
  }

  static const char* value(const ::ross::vehicle_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ross::vehicle_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String Battery_Status\n"
"std_msgs/String Velocity_Status\n"
"std_msgs/String Alt_Status \n"
"std_msgs/String Position_x\n"
"std_msgs/String Position_y\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::ross::vehicle_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ross::vehicle_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Battery_Status);
      stream.next(m.Velocity_Status);
      stream.next(m.Alt_Status);
      stream.next(m.Position_x);
      stream.next(m.Position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ross::vehicle_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ross::vehicle_status_<ContainerAllocator>& v)
  {
    s << indent << "Battery_Status: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.Battery_Status);
    s << indent << "Velocity_Status: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.Velocity_Status);
    s << indent << "Alt_Status: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.Alt_Status);
    s << indent << "Position_x: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.Position_x);
    s << indent << "Position_y: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.Position_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSS_MESSAGE_VEHICLE_STATUS_H

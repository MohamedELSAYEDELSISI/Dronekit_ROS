// Generated by gencpp from file ross/landRequest.msg
// DO NOT EDIT!


#ifndef ROSS_MESSAGE_LANDREQUEST_H
#define ROSS_MESSAGE_LANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ross
{
template <class ContainerAllocator>
struct landRequest_
{
  typedef landRequest_<ContainerAllocator> Type;

  landRequest_()
    : confirm(0.0)  {
    }
  landRequest_(const ContainerAllocator& _alloc)
    : confirm(0.0)  {
  (void)_alloc;
    }



   typedef float _confirm_type;
  _confirm_type confirm;





  typedef boost::shared_ptr< ::ross::landRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ross::landRequest_<ContainerAllocator> const> ConstPtr;

}; // struct landRequest_

typedef ::ross::landRequest_<std::allocator<void> > landRequest;

typedef boost::shared_ptr< ::ross::landRequest > landRequestPtr;
typedef boost::shared_ptr< ::ross::landRequest const> landRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ross::landRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ross::landRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ross::landRequest_<ContainerAllocator1> & lhs, const ::ross::landRequest_<ContainerAllocator2> & rhs)
{
  return lhs.confirm == rhs.confirm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ross::landRequest_<ContainerAllocator1> & lhs, const ::ross::landRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ross

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ross::landRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ross::landRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::landRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::landRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::landRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::landRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ross::landRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "044386efde34978b6072108ea234900f";
  }

  static const char* value(const ::ross::landRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x044386efde34978bULL;
  static const uint64_t static_value2 = 0x6072108ea234900fULL;
};

template<class ContainerAllocator>
struct DataType< ::ross::landRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ross/landRequest";
  }

  static const char* value(const ::ross::landRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ross::landRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 confirm\n"
;
  }

  static const char* value(const ::ross::landRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ross::landRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.confirm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct landRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ross::landRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ross::landRequest_<ContainerAllocator>& v)
  {
    s << indent << "confirm: ";
    Printer<float>::stream(s, indent + "  ", v.confirm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSS_MESSAGE_LANDREQUEST_H

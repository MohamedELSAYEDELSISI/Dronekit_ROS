// Generated by gencpp from file ross/pose_serviceResponse.msg
// DO NOT EDIT!


#ifndef ROSS_MESSAGE_POSE_SERVICERESPONSE_H
#define ROSS_MESSAGE_POSE_SERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ross
{
template <class ContainerAllocator>
struct pose_serviceResponse_
{
  typedef pose_serviceResponse_<ContainerAllocator> Type;

  pose_serviceResponse_()
    : Ack(0.0)  {
    }
  pose_serviceResponse_(const ContainerAllocator& _alloc)
    : Ack(0.0)  {
  (void)_alloc;
    }



   typedef float _Ack_type;
  _Ack_type Ack;





  typedef boost::shared_ptr< ::ross::pose_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ross::pose_serviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pose_serviceResponse_

typedef ::ross::pose_serviceResponse_<std::allocator<void> > pose_serviceResponse;

typedef boost::shared_ptr< ::ross::pose_serviceResponse > pose_serviceResponsePtr;
typedef boost::shared_ptr< ::ross::pose_serviceResponse const> pose_serviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ross::pose_serviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ross::pose_serviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ross::pose_serviceResponse_<ContainerAllocator1> & lhs, const ::ross::pose_serviceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.Ack == rhs.Ack;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ross::pose_serviceResponse_<ContainerAllocator1> & lhs, const ::ross::pose_serviceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ross

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ross::pose_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ross::pose_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::pose_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ross::pose_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::pose_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ross::pose_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ross::pose_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed42a75d93fed3defa0b7c591c2281a2";
  }

  static const char* value(const ::ross::pose_serviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed42a75d93fed3deULL;
  static const uint64_t static_value2 = 0xfa0b7c591c2281a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::ross::pose_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ross/pose_serviceResponse";
  }

  static const char* value(const ::ross::pose_serviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ross::pose_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Ack\n"
"\n"
;
  }

  static const char* value(const ::ross::pose_serviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ross::pose_serviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Ack);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_serviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ross::pose_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ross::pose_serviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "Ack: ";
    Printer<float>::stream(s, indent + "  ", v.Ack);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSS_MESSAGE_POSE_SERVICERESPONSE_H
